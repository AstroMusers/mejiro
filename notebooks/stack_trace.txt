{
	"name": "Exception",
	"message": "R = 0.00e+00 is too small (min. R = 1.00e-03)",
	"stack": "---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Input In [17], in <cell line: 1>()
----> 1 realizationCDM = CDM(z_lens=0.37256654269631556, z_source=1.2304326933632517, cone_opening_angle_arcsec=11, LOS_normalization=0.0)

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/pyHalo/PresetModels/cdm.py:141, in CDM(z_lens, z_source, sigma_sub, log_mlow, log_mhigh, concentration_model_subhalos, kwargs_concentration_model_subhalos, concentration_model_fieldhalos, kwargs_concentration_model_fieldhalos, truncation_model_subhalos, kwargs_truncation_model_subhalos, truncation_model_fieldhalos, kwargs_truncation_model_fieldhalos, shmf_log_slope, cone_opening_angle_arcsec, log_m_host, r_tidal, LOS_normalization, two_halo_contribution, delta_power_law_index, geometry_type, kwargs_cosmo)
    133     mass_function_class_list += [ShethTormen]
    135 kwargs_halo_model = {'truncation_model_subhalos': truncation_model_subhalos,
    136                      'concentration_model_subhalos': concentration_model_subhalos,
    137                      'truncation_model_field_halos': truncation_model_fieldhalos,
    138                      'concentration_model_field_halos': concentration_model_fieldhalos,
    139                      'kwargs_density_profile': {}}
--> 141 realization_list = pyhalo.render(population_model_list, mass_function_class_list, kwargs_mass_function_list,
    142                                       spatial_distribution_class_list, kwargs_spatial_distribution_list,
    143                                       geometry, mdef_subhalos, mdef_field_halos, kwargs_halo_model, nrealizations=1)
    144 return realization_list[0]

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/pyHalo/pyhalo.py:61, in pyHalo.render(self, population_model_list, mass_function_class_list, kwargs_mass_function_list, spatial_distribution_class_list, kwargs_spatial_distribution_list, geometry_class, mdef_subhalos, mdef_field_halos, kwargs_halo_model, nrealizations)
     59 realization_list = []
     60 for i in range(0, nrealizations):
---> 61     masses, x_arcsec, y_arcsec, r3d, redshifts, subhalo_flag, rendering_classes = self.render_masses_positions(population_model_list,
     62                         mass_function_class_list,
     63                         kwargs_mass_function_list,
     64                         spatial_distribution_class_list,
     65                         kwargs_spatial_distribution_list,
     66                         geometry_class)
     67     realization_list.append(self.create_realization(masses, x_arcsec, y_arcsec, r3d, redshifts, subhalo_flag, rendering_classes,
     68                                                     geometry_class, mdef_subhalos, mdef_field_halos, kwargs_halo_model))
     69 return realization_list

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/pyHalo/pyhalo.py:90, in pyHalo.render_masses_positions(self, population_model_list, mass_function_class_list, kwargs_mass_function, spatial_distribution_class_list, kwargs_spatial_distribution, geometry_class)
     78 \"\"\"
     79 
     80 :param population_model_list:
   (...)
     86 :return:
     87 \"\"\"
     89 plane_redshifts, redshift_spacing = generate_lens_plane_redshifts(self.zlens, self.zsource)
---> 90 population_model = HaloPopulation(population_model_list,
     91                                       mass_function_class_list,
     92                                       kwargs_mass_function,
     93                                       spatial_distribution_class_list,
     94                                       kwargs_spatial_distribution,
     95                                       self.lens_cosmo,
     96                                       geometry_class,
     97                                       plane_redshifts,
     98                                       redshift_spacing)
     99 masses, x_arcsec, y_arcsec, r3d, redshifts, subhalo_flag = population_model.render()
    100 return masses, x_arcsec, y_arcsec, r3d, redshifts, subhalo_flag, population_model.rendering_classes

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/pyHalo/Rendering/halo_population.py:54, in HaloPopulation.__init__(self, model_list, mass_function_class_list, kwargs_mass_function_list, spatial_distribution_class_list, kwargs_spatial_distribution, lens_cosmo, geometry, lens_plane_redshift_list, redshift_spacings)
     51     model = Subhalos(mass_function_model_class, kwargs_model, spatial_distribution_model,
     52      geometry, lens_cosmo)
     53 elif model_name == 'TWO_HALO':
---> 54     model = TwoHaloContribution(mass_function_model_class, kwargs_model, spatial_distribution_model,
     55      geometry, lens_cosmo, lens_plane_redshift_list, redshift_spacings)
     56 else:
     57     raise Exception('model '+str(model_name)+' not recognized. ')

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/pyHalo/Rendering/two_halo.py:40, in TwoHaloContribution.__init__(self, mass_function_model, kwargs_mass_function, spatial_distribution_model, geometry, lens_cosmo, lens_plane_redshifts, delta_z_list)
     38 idx = np.argmin(abs(np.array(lens_plane_redshifts) - z_eval))
     39 delta_z = delta_z_list[idx]
---> 40 boost = two_halo_enhancement_factor(z_eval, delta_z, lens_cosmo, host_m200)
     41 relative_enhancement = boost - 1.
     42 kwargs_mass_function_scaled = deepcopy(kwargs_mass_function)

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/pyHalo/Rendering/two_halo.py:77, in two_halo_enhancement_factor(z_lens, z_step, lens_cosmo, overdensity_m200)
     75 rmax = lens_cosmo.cosmo.D_C_transverse(z_lens + z_step) - lens_cosmo.cosmo.D_C_transverse(z_lens)
     76 rmin = min(rmax, 0.5)
---> 77 mean_boost = 2 * quad(lens_cosmo.twohaloterm, rmin, rmax, args=(overdensity_m200, z_lens))[0] / (rmax - rmin)
     78 two_halo_boost = 1 + mean_boost
     79 return two_halo_boost

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/scipy/integrate/_quadpack_py.py:411, in quad(func, a, b, args, full_output, epsabs, epsrel, limit, points, weight, wvar, wopts, maxp1, limlst)
    408 flip, a, b = b < a, min(a, b), max(a, b)
    410 if weight is None:
--> 411     retval = _quad(func, a, b, args, full_output, epsabs, epsrel, limit,
    412                    points)
    413 else:
    414     if points is not None:

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/scipy/integrate/_quadpack_py.py:523, in _quad(func, a, b, args, full_output, epsabs, epsrel, limit, points)
    521 if points is None:
    522     if infbounds == 0:
--> 523         return _quadpack._qagse(func,a,b,args,full_output,epsabs,epsrel,limit)
    524     else:
    525         return _quadpack._qagie(func,bound,infbounds,args,full_output,epsabs,epsrel,limit)

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/pyHalo/Halos/lens_cosmo.py:97, in LensCosmo.twohaloterm(self, r, M, z, mdef)
     95 M_h = M * h
     96 r_h = r * h
---> 97 rho_2h = twoHaloTerm(r_h, M_h, z, mdef=mdef) / self.cosmo._colossus_cosmo.rho_m(z)
     98 return rho_2h

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/colossus/lss/bias.py:260, in twoHaloTerm(r, M, z, mdef, model)
    258 cosmo = cosmology.getCurrent()
    259 bias = haloBias(M, z, mdef, model = model)
--> 260 xi = cosmo.correlationFunction(r, z)
    261 rho_2h = cosmo.rho_m(z) * bias * xi
    263 return rho_2h

File /data/bwedig/.conda/envs/pandeia/lib/python3.9/site-packages/colossus/cosmology/cosmology.py:3048, in Cosmology.correlationFunction(self, R, z, derivative, ps_args)
   3046 R_req = np.min(R)
   3047 if R_req < self.R_xi[0]:
-> 3048 \traise Exception('R = %.2e is too small (min. R = %.2e)' % (R_req, self.R_xi[0]))
   3050 R_req = np.max(R)
   3051 if R_req > self.R_xi[-1]:

Exception: R = 0.00e+00 is too small (min. R = 1.00e-03)"
}