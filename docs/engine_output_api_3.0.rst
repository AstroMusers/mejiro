Description of Outputs from an ETC Calculation (v3.0)
=====================================================

Users intending to compare engine results to the Web UI may want to jump directly to the
"web_report" section at the bottom of the document.

Exceptions:

  Normally expected exceptions are of base class
  pandeia.engine.custom_exceptions.PandeiaException. The attribute .message contains a
  plain text description of the problem suitable for display to the user.

  There are numerous subclasses of PandeiaException that are not documented here, but can
  be seen in pandeia.engine.custom_exceptions


The return value from perform_calculation() is a nested dict. The rest of this document
describes the heirarchical organization and content of the dict and its subdicts. Users
intending to compare engine results to the Web UI may want to jump directly to the
"web_report" section at the bottom of the document.

transform: dict
  This contains the information that describes the axes in the 2D and 3D images (e.g.
  sizes, extents, and step sizes). This information is used to map pixel coordinates to
  world coordinates. There are two sets of numbers for the wavelength axis because the
  wavelength sampling of the spectrum used in the calculation is usually different from
  the wavelength sampling at the detector plane. The detector plane sampling is usually
  much finer. It would be inefficient to perform the entirety of the ETC calculation at
  the full detector wavelength resolution.

    x_refpix: int
        Reference pixel for the X axis. Always 0.
    x_refval: float
        Value of X at x_refpix.
    x_max: float
        Maximum X value.
    x_min: float
        Minimum X value.
    x_step: float
        Size of pixel in X direction in arcseconds/pixel.
    x_size: int
        Length of X axis.

    y_refpix: int
        Reference pixel for the Y axis.
    y_refval: float
        Value of Y at y_refpix.
    y_max: float
        Maximum Y value.
    y_min: float
        Minimum Y value.
    y_step: float
        Size of pixel in Y direction in arcseconds/pixel.
    y_size: int
        Length of Y axis.

    wave_refpix: int
        Reference pixel for the wavelength axis.
    wave_refval: float
        Value of wavelength at wave_refpix.
    wave_max: float
        Maximum wavelength value.
    wave_min: float
        Minimum wavelength value.
    wave_step: float
        Size of pixel in wavelength axis in microns/pixel
    wave_size: int
        Length of wavelength axis

    wave_det_refpix: int
        Reference pixel for the detector-sampled wavelength axis
    wave_det_refval: float
        Value of wavelength at wave_det_refval
    wave_det_max: float
        Maximum wavelength value sampled at the detector plane
    wave_det_min: float
        Minimum wavelength value sampled at the detector plane
    wave_det_step: float
        Size of detector pixels in wavelength axis in microns/pixel
    wave_det_size: int
        Length of the detector-sampled wavelength axis

3d: dict
  The 3-D data products generated by the engine calculation

    flux: list of numpy.ndarray (3-D)
       The model flux cube(s) used in the calculation, excluding background. Units of
       mJy/pixel.
    flux_plus_background: list of numpy.ndarray (3-D)
       The model flux cube(s) used in the calculation, including signal from the
       background. The background only can be calculated as flux_plus_background - flux.
       Units of mJy/pixel.
    reconstructed: numpy.ndarray (3-D) (IFU calculations only)
       This is a reconstructed simulation of an observed (and possibly binned) flux cube
       generated by IFU calculations. Units of e-/s/pixel
    reconstructed_signal: numpy.ndarray (3-D) (IFU calculations only)
        The signal component of the reconstructed (and possibly binned) flux cube.  Units
        of e-/s/pixel
    reconstructed_noise: numpy.ndarray (3-D) (IFU calculations only)
        The noise component of the reconstructed (and possibly binned) flux cube.  Units
        of e-/s/pixel
    reconstructed_snr: numpy.ndarray (3-D) (IFU calculations only)
        reconstructed_signal divided by reconstructed_noise.
    reconstructed_saturation: numpy.ndarray (3-D) (IFU calculations only)
        Reconstructed saturation cube, possibly binned.

2d: dict
    The 2-D data products generated by the engine calculation.  Axis descriptions are
    given in 'transform'. 'unrotated' versions of these objects may exist for Y-dispersed
    spectroscopic modes that are rotated to conform to the Web UI default of X-dispersed data.

    detector: numpy.ndarray (2-D)
        ['2d']['detector'](x,y) is the count rate at the (possibly binned) detector in
        e-/sec, including simulated noise. This is the product closest to what a "real"
        observation would look like. Shown in the 'Detector' plot on the Web UI.

    snr: numpy.ndarray (2-D)
        ['2d']['snr'](x,y) is the S/N at the (possibly binned) detector. Shown in the '2D
        SNR' plot on the Web UI.

    saturation: numpy.ndarray (2-D)
        Saturation map at the (binned) detector. 0 -> no saturation, 1 -> partial
        saturation, 2 -> full saturation. Shown in the 'Saturation' plot on the Web UI.

    ngroup_map: numpy.ndarray(2-D)
        Map of the maximum number of groups BEFORE a given (binned) pixel will saturate,
        with current instrument and detector setup. Shown in the 'Groups Before Saturation'
        plot on the Web UI.

1d: dict
  The 1-D data products generated by the engine calculation encompass both the input model
  and the extracted outputs.
  
  Here we use 'Target' to refer to the position within the Scene defined by the Strategy.

    In these descriptions:
     - wave is wavelength in microns
     - except where otherwise noted, the second array is in electrons/s

Model:

    wave_calc: numpy.ndarray (1-D)
        Wavelength set used in the calculation before sampled and mapped onto the detector
        plane.

    target: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, Input integrated scene flux (in mJy). 
        This is the sum of all the input spectra from all defined sources within the
        scene, resampled onto the model wavelength grid (wave_calc). It excludes
        background flux and all detector throughputs.

    fp: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, integrated scene count rate at the focal plane in
        photons/s/pixel/micron. 
        The focal plane rate includes signal from all defined sources within the scene. It
        also incorporates the effect of throughputs from filters, dispersers, and internal
        optics as well as detector QE, and includes losses from pupil masks and focus
        apertures (e.g. slits). It does not, however, include the quantum yield correction
        involved in converting to electrons/s, or backgrounds.

    bg: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, input background surface brightness in MJy/sr. 
        This is the input background surface brightness binned to the wavelength scale
        used in the calculation, wave_calc.

    bg_rate: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, Background rate at focal plane. 
        This is the count rate per detector pixel in e-/sec/pixel and is spatially (but
        not necessarily spectrally) constant. 

Extracted: These outputs are per-detector-pixel. For imaging modes, these 1D arrays will
be single-valued, at the effective wavelength of the filter.

    wave_pix: numpy.ndarray (1-D)
        Wavelength in microns as sampled in pixels on the (optionally binned) detector.

    sn: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, Signal/Noise Ratio. Shown under the SNR options in the Web
        UI.

    extracted_noise: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, total noise. The output of the noise model, including
        target poisson noise, backgrounds, dark current, readnoise, flat field noise, and
        the effect of cosmic rays.

    extracted_flux: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, Target count rate on the (possibly binned) detector in
        e-/sec, as extracted by the defined Strategy. Shown under "ApFlux" in the Web UI.

    extracted_flux_plus_bg: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, Target count rate on the (possibly binned) detector
        including background in e-/sec, as extracted by the defined Strategy. If
        background subtraction is being performed, this should be the same as
        extracted_flux.

    total_flux: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, integrated scene count rate on the (possibly binned)
        detector in e-/s. This includes signal from all sources within the scene, but does
        not include background.

    extracted_bg_total: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, total background count rate in e-/sec on the (binned)
        detector. This includes all flux contained within the background extraction region
        and is normalized to the target extraction region by the ratio of the areas of the
        regions.

    extracted_bg_only: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, background count rate in e-/sec on the (binned) detector.
        This includes only the flux due to the scene background and is normalized to the
        area of the target extraction region. Displayed in the Web UI as "ApBackground".

    extracted_contamination: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, contamination count rate in e-/sec on the (binned)
        detector.  
        This is extracted_bg_total - extracted_bg_only and gives a measure of how much
        non-background flux (e.g. PSF wings or contamination sources) is contained within
        the background estimation region.  The count rate is normalized to the target
        extraction region area. 
        
    extracted_contrast: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Separation in arcseconds, fractional contrast. 
        Coronagraphy strategy only. Shows the contrast of an observation as the scene is
        offset from the occulter along the azimuth given in "scalar" "contrast_azimuth".
        Shown under "Contrast" in the Web UI.

    n_partial_saturated: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, number of partially saturated pixels in extraction aperture

    n_full_saturated: list [numpy.ndarray (1-D), numpy.ndarray (1-D)]
        Wavelength in microns, number of fully saturated pixels in extraction aperture.


scalar: dict
  The scalar quantities generated by the engine Strategy. Properties that share a name
  with one of the 1D products are extracted from that 1D product at the reference
  wavelength. Values are those of the pixel corresponding to the reference wavelength.

    extracted_flux: float
        Total flux (e-/sec) within the extraction aperture, determined at the
        reference_wavelength for dispersed modes. Omitted for strategies that do not
        specify an extraction aperture.
    extracted_noise: float
        Noise (standard deviation, e-/sec) within the extraction aperture, at the
        reference_wavelength for dispersed modes. Omitted for strategies that do not
        specify an extraction aperture.
    sn: float
        Extracted signal-to-noise ratio (extracted_flux/extracted_noise), determined at
        the reference_wavelength for dispersed modes. Omitted for strategies that do not
        specify an extraction aperture.
    background_total: float
        Extracted background flux (e-/sec) including all components, determined at the
        reference_wavelength for dispersed modes.
    background_sky: float
        Extracted sky background flux (e-/sec) excluding any signal from the scene. This
        is determined at the reference_wavelength for dispersed modes.
    contamination: float
        Fraction of background_total that is due to signal from the scene:
        (background_total-background_sky)/background_total
    background: float
        Background surface brightness in MJy/sr at reference_wavelength.
    reference_wavelength: float (microns)
        Wavelength where scalar values are determined. If imaging, this is the effective
        wavelength of the filter. If a dispersed mode, this is the wavelength (of the
        pixel center) at which scalar values were extracted.
    exposure_time: float
        Exposure time for a single exposure specification. Identical to the APT exposure
        time.
    total_exposure_time: float (seconds)
        Total on-source exposure time for the calculation as determined by the exposure
        specification and strategy. This will be different from exposure_time for modes
        with more than one dither (for instance, IFUNodInScene) 
    all_dithers_time: float (seconds)
        The total time needed to execute the exposures for this strategy. Identical to
        total_exposure_time unless there is an off-source pointing (for instance,
        IFUNodOffScene has a background pointing). Does not include overheads.
    measurement_time: float (seconds)
        Time between first measurement and last measurement of an exposure. Roughly, the
        time spent accumulating flux.
    saturation_time: float (seconds)
        Time between first reset and last measurement, or the time spent collecting
        photons between resets, used for determining saturation of a given integration.
    sat_ngroups: int
        Highest number of groups (in current instrument and detector configuration)
        possible before the brightest pixel on the detector begins to saturate.
    fraction_saturation: float
        Fraction of saturation of the brightest pixel on the detector. Can be greater than
        1 if saturated.
    total_integrations: int
        The total number of integrations (integrations * exposures) in the calculation.
    duty_cycle: float
        Ratio between "measurement time" and "exposure time". Is a measure for the
        fraction of time being used to collect scientifically useful photons.
    cr_ramp_rate: float
        Assumed cosmic ray rate in events/ramp where ramp time is determined by the
        exposure specification.
    background_area: float or None
        Area in pixels of background estimation region. "None" if background subtraction
        is turned off.
    extraction_area: float
        Area in pixels of target extraction region.
    contrast_separation: float
        Radius in arcsec at which contrast is measured. Only applicable to coronagraphy.
    contrast_azimuth: float
        Azimuth in degrees where contrast is measured. Only applicable to coronagraphy.
    contrast: float
        Contrast measured at polar coords (contrast_separation, contrast_azimuth). Only
        applicable to coronagraphy.
    filter: string
        Instrument filter, if any, used in calculation.
    disperser: string
        Instrument disperser, if any, used in calculation.
    slit: string
        Instrument slit, if any, used in calculation.
    x_offset: float
        X offset in arcsec of source extraction aperture
    y_offset: float
        Y offset in arcsec of source extraction aperture
    aperture_size: float
        Radius in arcsec of source extraction aperture
    brightest_pixel: float
        The e-/s value of the brightest pixel in the FOV.

information: dict
  This contains other information provided by the engine that isn't the result of any
  calculation.  This will also need to get fleshed out over time.

    calc_type: string
        Type of calculation as reported by the engine ('spec' or 'image')

    exposure_specification: dict
        nsample: int
           Number of samples of a pixel for each frame
        nsample_skip: int
           Number of samples of a pixel skipped for each frame
        nframe: int
            Number of frames read out and saved per group
        nskip: int
            Number of frames skipped per group
        ngroup: int
            Number of groups in a ramp
        nint: int
            Number of integrations per exposure
        nexp: int
            Number of exposures
        nramps: int
            Total number of ramps (nexp * nint)
        nprerej: int
            Number of groups rejected by the pipeline in the beginning of the ramp
        npostrej: int
            Number of groups rejected by the pipeline in the end of the ramp
        tframe: float
            Readout time per frame (seconds)
        tgroup: float
            Total time required per group (seconds)
        total_exposure_time: float
            Total exposure time for the calculation as determined by the exposure
            specification and strategy (seconds). This value, unlike the one in "scalar",
            does not account for potential multiple dithers on the source (e.g.
            IFUNodInScene)
        exposure_time: float
            Exposure time for a single exposure specification. Identical to the APT
            exposure time. Also appears in "scalar".
        measurement_time: float
            Time in an exposure used to collect scientifically useful photons. Also
            appears in "scalar".
        saturation_time: float
            Time in an integration, relevant for saturation. Also appears in "scalar".
        total_integrations: int
            The total number of integrations (integrations * exposures) in the
            calculation. Also appears in "scalar".
        det_type: string
            Type of detector (currently h2rg and sias supported)
        subarray: string
            Portion of detector being read out
        pattern: string
            Name of readout pattern

input: dict
  A copy of the input dict used in the calculation.

sub_reports: list of dicts
  Calculations involving multiple pointings (ifunodinscene, ifunodoffscene, coronagraphy)
  will include this. Each entry in the list will be an entire engine output dict for that
  pointing, in the same format described in this document.

warnings: dict
  This contains any warnings or other messages, and is what appears in the 'Warnings' tab
  in the Web UI. 
  
  Common Warnings include:

  * Warnings for fully saturated pixels (where full saturation is defined as saturation in
    the first or second read of the ramp)
  * Warnings for partially saturated pixels (where partial saturation is defined as
    saturation after at least two reads)
  * Warnings for low SNR
  * Warnings for apertures extending outside the calculated region
  * Warnings for backgrounds and extraction apertures being more than 10% smaller than requested
  * Warnings for targets obscured behind a mask
  * Warnings if there is substantial source flux (after applying instrument throughputs)
    outside the instrumental wavelength range
  * Warnings for instrument setups that are not formally supported by APT.

  The complete list of non-instrument-specific warnings can be found in
  pandeia/engine/pandeia_warnings.py. Instrument- and mode-specific warnings are defined
  in the Pandeia Refdata config.json files for that instrument.

web_report: dict
  This dictionary contains an ordered list of all the items displayed in the Report pane
  on the Web UI, as needed by the particular mode. Each list entry constitutes a section
  of the Report pane, itself an ordered list of calculation products. Each calculation
  product is represented by a dictionary with the name, value, and associated unit. Some
  products may consist only of a printed string, encoded as "name". 
